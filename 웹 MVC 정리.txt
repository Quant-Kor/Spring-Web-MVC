스프링에서
Servlet으로 개발 요즘 거의 X
메이븐과 톰캣이 준비물


스프링 --> httpservlet 기반으로 이루어짐!
애노테이션 기반(@)

서블릿 필터의 init, doFilter, destroy 과정에서
doFilter부분에서 서블릿이 체인 구조이기 때문에 request, response로 다음 필터로 연결시켜주어야함! 그렇게하여서 다음 필터로 갈 수 있게 만들고 마지막 필터는 서블릿으로 연결됨.

스프링 IOC컨테이너 연동
web.xml에 listener를 통해 스프링 프레임워크 웹 컨텍스트를 받으면
<context-param></context-param> 이부분에
스프링 웹 mvc annotationConfigwebapplication을 통해 스프링 설정파일을 만들어주고 이를 이용해 빈으로 등록하는 것과 같은 일들을 할 수 있음!

서블릿의 단점
요청하나가 들어올때마다 web.xml에 적어주어야하는데  이러한 단점들을 보완해주는것이 디스패처 서블릿이 프론트 컨트롤러 역할을 통해 하나로 컨트롤을 다 받고 다시 재 분배 해줌 --> 디스패처

디스패처도 web.xml에 <servlet></servlet> 으로 정의하고 displatcherServelt를 입력한뒤 파라미터또한 받을 수 있음
굳이 계층구조를 만들 필요 없음(부모-자식 구조)
컨트롤러와 서비스 등등을 한번에 계층구조없이 만드는 것이 대부분, 객체들을 빈으로 등록해서 사용

--- 지금까지 배운것 --> 서블릿이라는 컨테이너 안에 스프링을 연동하는 방법.      아직 스프링 부트로 가지 않았음.


디스패처서블릿 동작원리 1부
---------------------------------------------------------------------------
디스패처 서블릿이 들고있는 여러개 핸들러 매핑중에서 (기본으로 2개)
BeanNameUrlHandler~
RequestMappingHandler~

디스패처가 지원해주는거
2가지 핸들러 매핑

Bean 다음 Request로 매핑되어서 찾아오면 getmapping으로 url을 찾아옴

핸들러 어댑터 3가지
httprequest
simplecontorller
requestmapping

디버그를 통해 찍어보면 핸들러의 정보가 다나옴
컨트롤러의 핸들러를 실행하게됨

@Restcontroller --> 일반적인 컨트롤러의 @response body를 사용한 컨트롤러와 동일함
모든 메소드마다 적어주는 것을 생략하기 위해 restcontroller를 사용!

reponsebody가 들어있음을 염두해 두어야함 (restcontroller에)

리스폰스바디를 사용한 경우 모델뷰는 널 값을 가짐

---------------------------------------------------------------------------




디스패처 서블릿 동작원리 2부(뷰가 있는 경우)
---------------------------------------------------------------------------
리스폰스 바디를 메소드에 주는것이 일반적!

리스폰스 바디가 붙은 경우, 붙지 않은 경우! 비교
뷰가 있는 경우 만들기 위해
sample.jsp만들기

비교하였을때 모델앤뷰의 값이 널값이 아닌 값이 들어있음!
리턴값에 따라 많이 달라짐

리스폰스 바디가 없는경우 뷰의 이름으로 생각해서 그 값을 바로 바인딩을 하여서 뷰를 렌더링함
jsp를 리스폰스에다가 심어서 보냄












