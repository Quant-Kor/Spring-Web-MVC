스프링에서
Servlet으로 개발 요즘 거의 X
메이븐과 톰캣이 준비물


스프링 --> httpservlet 기반으로 이루어짐!
애노테이션 기반(@)

서블릿 필터의 init, doFilter, destroy 과정에서
doFilter부분에서 서블릿이 체인 구조이기 때문에 request, response로 다음 필터로 연결시켜주어야함! 그렇게하여서 다음 필터로 갈 수 있게 만들고 마지막 필터는 서블릿으로 연결됨.

스프링 IOC컨테이너 연동
web.xml에 listener를 통해 스프링 프레임워크 웹 컨텍스트를 받으면
<context-param></context-param> 이부분에
스프링 웹 mvc annotationConfigwebapplication을 통해 스프링 설정파일을 만들어주고 이를 이용해 빈으로 등록하는 것과 같은 일들을 할 수 있음!

서블릿의 단점
요청하나가 들어올때마다 web.xml에 적어주어야하는데  이러한 단점들을 보완해주는것이 디스패처 서블릿이 프론트 컨트롤러 역할을 통해 하나로 컨트롤을 다 받고 다시 재 분배 해줌 --> 디스패처

디스패처도 web.xml에 <servlet></servlet> 으로 정의하고 displatcherServelt를 입력한뒤 파라미터또한 받을 수 있음
굳이 계층구조를 만들 필요 없음(부모-자식 구조)
컨트롤러와 서비스 등등을 한번에 계층구조없이 만드는 것이 대부분, 객체들을 빈으로 등록해서 사용

--- 지금까지 배운것 --> 서블릿이라는 컨테이너 안에 스프링을 연동하는 방법.      아직 스프링 부트로 가지 않았음.


디스패처서블릿 동작원리 1부
---------------------------------------------------------------------------
디스패처 서블릿이 들고있는 여러개 핸들러 매핑중에서 (기본으로 2개)
BeanNameUrlHandler~
RequestMappingHandler~

디스패처가 지원해주는거
2가지 핸들러 매핑

Bean 다음 Request로 매핑되어서 찾아오면 getmapping으로 url을 찾아옴

핸들러 어댑터 3가지
httprequest
simplecontorller
requestmapping

디버그를 통해 찍어보면 핸들러의 정보가 다나옴
컨트롤러의 핸들러를 실행하게됨

@Restcontroller --> 일반적인 컨트롤러의 @response body를 사용한 컨트롤러와 동일함
모든 메소드마다 적어주는 것을 생략하기 위해 restcontroller를 사용!

reponsebody가 들어있음을 염두해 두어야함 (restcontroller에)

리스폰스바디를 사용한 경우 모델뷰는 널 값을 가짐

---------------------------------------------------------------------------




디스패처 서블릿 동작원리 2부(뷰가 있는 경우)
---------------------------------------------------------------------------
리스폰스 바디를 메소드에 주는것이 일반적!

리스폰스 바디가 붙은 경우, 붙지 않은 경우! 비교
뷰가 있는 경우 만들기 위해
sample.jsp만들기

비교하였을때 모델앤뷰의 값이 널값이 아닌 값이 들어있음!
리턴값에 따라 많이 달라짐

리스폰스 바디가 없는경우 뷰의 이름으로 생각해서 그 값을 바로 바인딩을 하여서 뷰를 렌더링함
jsp를 리스폰스에다가 심어서 보냄

---------------------------------------------------------------------------




디스패처 서블릿 동작원리 3부
---------------------------------------------------------------------------
디스패처가 제공하는 핸들러 매핑, 뷰 리졸버 어디서 오는가?

initviewResolver에서 옴
핸들러 매핑에 해당하는 값들을 모두다 가져오는 것이 기본!
flag 값이 true이기 때문에

init부분은 처음 한번만 일어나는 것이기 때문에 다시 실행되었을때 디버그에 걸리지 않음!






스프링 MVC 구성 요소
---------------------------------------------------------------------------
원래 DispatcherServlet의 multipartResolver에는 원래 널값이 저장되어 있어서 빈으로 지정이 되어있지않다면 쓸 수 X

스프링 부트의 multipartResolver에는 값이 고정되어 있음(아무런 설정을 하지 않아도 손쉽게 만들 수 있음, 파일 업로드 가능)


LocaleResolver --> 클라이언트의 지역 정보를 확인하는 것
그 이후로 메세지 소스를 통해서 맞는 언어로 메시지 전달!
Acceptheaderlocaleresolver를 통해 확인!


테마리졸버에는 기본값 -> fixedresolver

핸들러 매핑
리퀘스트 핸들러~(리턴 값(객체)을 핸들러)  -- 애노테이션 기반으로 핸들러를 찾아줌 (많이 씀)
빈 핸들러~(빈이 있는가 없는가?)

핸들러 매핑과 핸들러 어댑터에서 새로운 반환형을 정의 하여서 사용할 수 있음
기본적으로 어느정도 매칭이 되어야함


FlashMapManager --> 포스트 요청시 리다이렉트를 하게되면 get요청으로 리 다이렉트되어서 반복된 요청이 발생하지 않도록 막아주는 것!
중복 폼 submission을 방지하기 위함!

get으로 리다이렉트를 할 시 그 파라미터 값을 주지 않고도 데이터를 전송하게끔 해주는것!(세션 기반) 




스프링 MVC 동작 원리 마무리
---------------------------------------------------------------------------

스프링 부트 없이 사용할때 빈에 뭐가 등록되어있는 지가 중요함.
빈이 없으면 기본 디스패처서블릿의 프로퍼티에 들어있는 것들이 실행이 됨
스프링 부트를 사용하는 스프링 MVC
자바 애플리케이션에 내장 톰캣을 만들고 그 안에 DispatcherServlet을 등록한다.
스프링 부트 자동 설정이 자동으로 해줌.
스프링 부트의 주관에 따라 여러 인터페이스 구현체를 빈으로 등록한다.


스프링 부트를 사용하면 스프링 MVC를 좀더 쉽게 사용할 수 있음!



스프링 MVC 설정
---------------------------------------------------------------------------

MVC 빈 설정부분

디스패처 서블릿의 프로퍼티에 정의되어 있는 기본 전략을 사용하는데 기본적인 클래스들이 갖고 잇는 기본값들이 적용이 됨!
prefix와 suffix가 없는 상태로 사용!(viewresolver에 있는) --> 우리가 원하는 값을 설정할 수 있음!

거의 대부분의 빈들이 커스터마이스즈 할 수 있는 것들이 많음(핸들러 매핑)

서블렛 필터와 비슷한 개념의 handlermapping.setInterceptors --> 서블릿보다 조금 더 유연
핸들러 매핑뿐만아니라 핸들러 어댑터또한 new로 새로운 객체를 만들어서 설정을 할 수 있는 것들이 많음

--> 아주 로우 레벨로 설정하는 거(일일히 빈을 다 설정하는 거)


 

@Enable WebMvc
configuration 애노테이션이 붙어있는 곳에 같이 쓰고  저 애노테이션을 사용 시 servletcontext를 설정을 해주어야함 가끔 servletcontext를 참조하기 때문에
애노테이션을 쓰게되면 원래 order가 bean과 request가 같았지만 지금은 request가 먼저 처리되고 그다음 bean 또한 
인터셉터가 비어있었는데 인터셉터에 값이 들어오게 됨!
핸들러매핑, 핸들러 어댑터 둘다 requestmapping이 우선순위가 높고 이것을 먼저 사용하면 성능적인 이점이 있음!

이것을 사용하게 되면 좋은 점이 delegatingwebmvcconfiguration을 받아오게 되는데 이는 위임구조라 코드를 손쉽게 기존의 빈에다가 인터셉터나 메시지 컨버터 같은 것들을 조금만 수정해서 사용할 수 있는 그러한 장점이 있음




WebMvcConfigurer --> 확장기능을 인터페이스를 통해 지원 webmvcconfigurer --> 뷰 리졸버를 직접 빈으로 등록안해도 이곳에서 제공하는 것으로 사용 할 수 있음

스프링 부트없이 스프링웹 mvc를 사용하는 방법
webmvcconfigurer가 제공하는 것들을 통해서 직접 일일히 다 설정하여 사용하는 것!



스프링 부트의 스프링 MVC 설정
뷰 리졸버를 보면 ContentNegotiationg뷰 리졸버가 우선순위가 가장 최 상위로 되어 있으면 나머지 1,2,3,4를 위임하는 구조를 띔. 타임리프 뷰 리졸버를 가지고 있음



스프링 부트 JSP
이니셜 라이져 생성 일반 애플리캐이션 말고도
독립적인 


WAR 파일 배포하기

WebMvcConfigurer 1부 formatter

도메인 클래스 컨버터

핸들러 인터셉터

핸들러 인터셉터 구현

리소스 핸들러

Http 메시지 컨버터

http 메시지 컨버터 2부 json

http 메시지 컨버터 xml

기타 webmvcconfigurer 설정

스프링 mvc 설정 마무리






